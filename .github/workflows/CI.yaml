# .github/workflows/ci.yml

name: Build, Test, and Deploy Application

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

# Grant permissions for the workflow to request a JWT from GitHub's OIDC provider.
permissions:
  id-token: write
  contents: read

jobs:
  build-and-test:
    name: Build, Test and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Data Directory and Set Permissions
        run: mkdir -p ./dynamodb_data && chmod 777 ./dynamodb_data

      - name: Build and run Docker Compose
        run: docker compose up --build -d

      - name: Wait for API service to be healthy
        run: |
          echo "Waiting for API..."
          sleep 10
          for i in {1..15}; do
            STATUS=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8001/)
            if [ "$STATUS" -eq 200 ]; then
              echo "API is up and running!"
              exit 0
            fi
            echo "Attempt $i: API not ready yet (Status: $STATUS). Retrying in 7 seconds..."
            sleep 7
          done
          echo "API did not start in time."
          exit 1

      - name: Run API Healthcheck Test
        run: |
          echo "--- Running API Healthcheck Test ---"
          curl -f http://localhost:8001/
          if [ $? -ne 0 ]; then
            echo "API Healthcheck Test FAILED"
            exit 1
          fi
          echo "API Healthcheck Test PASSED"

      - name: Run Database Test
        run: |
          echo "--- Running Database Test ---"
          # Install/Update the AWS CLI v2
          echo "Installing/Updating AWS CLI..."
          sudo apt-get update && sudo apt-get install -y unzip
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

          aws configure set aws_access_key_id dummykey
          aws configure set aws_secret_access_key dummysecret
          aws configure set region us-east-1

          echo "Checking for initial data in Residents table..."
          aws dynamodb scan --table-name Residents --endpoint-url http://localhost:8000 | grep "Yossi Cohen"
          if [ $? -ne 0 ]; then
            echo "DB Test FAILED: Initial resident data not found."
            exit 1
          fi
          echo "Initial data check PASSED."

      # --- START OF NEW DEPLOYMENT STEPS ---

      - name: Configure AWS Credentials
        if: success() # Only run if tests pass
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # This role ARN must be created in your AWS account and stored as a GitHub secret
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        if: success()
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - name: Tag and Push Docker image to ECR
        if: success()
        env:
          # Use the ECR registry URI from the previous login step's output
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # The name of your ECR repository, stored as a GitHub secret
          ECR_REPOSITORY: gatekeeper-api-dev
          # The tag for the image, e.g., 'latest'
          IMAGE_TAG: latest
        run: |
          # The image name 'gateup-api' is derived from your project directory ('GateUP')
          # and the service name ('api') in your docker-compose.yml file.
          IMAGE_NAME=gateup-api

          echo "Tagging image $IMAGE_NAME:$IMAGE_TAG"
          docker tag $IMAGE_NAME:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Image pushed successfully to ECR."

      - name: All Tests Passed
        if: success()
        run: echo "CI/CD Pipeline Succeeded. All tests passed and image was pushed to ECR!"

      - name: Tests Failed
        if: failure()
        run: |
          echo "CI Pipeline FAILED"
          echo "--- Dumping final API logs ---"
          docker compose logs api
          echo "--- Dumping final DB logs ---"
          docker compose logs dynamodb
          exit 1
