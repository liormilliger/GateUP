# .github/workflows/ci.yml

name: Local Build and Test Pipeline

on:
  push:
    branches: [ "**" ]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build and run Docker Compose
        run: docker compose up --build -d

      - name: Check initial container status
        run: |
          echo "Waiting 15 seconds for services to stabilize..."
          sleep 15
          echo "--- Dumping initial API logs ---"
          docker compose logs api
          echo "--- Dumping initial DB logs ---"
          docker compose logs dynamodb

      - name: Wait for API service to be healthy
        run: |
          echo "Waiting for API..."
          for i in {1..15}; do
            STATUS=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8001/)
            if [ "$STATUS" -eq 200 ]; then
              echo "API is up and running!"
              exit 0
            fi
            echo "Attempt $i: API not ready yet (Status: $STATUS). Retrying in 7 seconds..."
            sleep 7
          done
          echo "API did not start in time."
          exit 1

      - name: Run API Healthcheck Test
        run: |
          echo "--- Running API Healthcheck Test ---"
          curl -f http://localhost:8001/
          if [ $? -ne 0 ]; then
            echo "API Healthcheck Test FAILED"
            exit 1
          fi
          echo "API Healthcheck Test PASSED"

      - name: Run Database Test
        run: |
          echo "--- Running Database Test ---"
          aws configure set aws_access_key_id dummykey
          aws configure set aws_secret_access_key dummysecret
          aws configure set region us-east-1

          echo "Checking for initial data in Residents table..."
          aws dynamodb scan --table-name Residents --endpoint-url http://localhost:8000 | grep "Yossi Cohen"
          if [ $? -ne 0 ]; then
            echo "DB Test FAILED: Initial resident data not found."
            exit 1
          fi
          echo "Initial data check PASSED."

          echo "Writing a test item to Guests table..."
          aws dynamodb put-item \
            --endpoint-url http://localhost:8000 \
            --table-name Guests \
            --item '{
              "license_plate": {"S": "CI-TEST-123"},
              "guest_name": {"S": "CI Tester"},
              "added_by": {"S": "workflow"}
            }'
          if [ $? -ne 0 ]; then
            echo "DB Test FAILED: 'put-item' command failed."
            exit 1
          fi
          echo "Write operation PASSED."

          echo "Reading test item back from Guests table..."
          aws dynamodb get-item \
            --endpoint-url http://localhost:8000 \
            --table-name Guests \
            --key '{"license_plate": {"S": "CI-TEST-123"}}' | grep "CI Tester"
          if [ $? -ne 0 ]; then
            echo "DB Test FAILED: Could not read the newly written item."
            exit 1
          fi
          echo "Read operation PASSED."
          echo "Database Test PASSED"

      - name: All Tests Passed
        if: success()
        run: echo "CI Pipeline Succeeded All tests passed!"

      - name: Tests Failed
        if: failure()
        run: |
          echo "CI Pipeline FAILED"
          echo "--- Dumping final API logs ---"
          docker compose logs api
          echo "--- Dumping final DB logs ---"
          docker compose logs dynamodb
