# .github/workflows/ci-cd.yml

name: CI/CD Pipeline for GateUP local build

on:
  push:
    branches: [ "main" ] # It's good practice to only deploy from specific branches like 'main'
  workflow_dispatch:

env:
  ECR_REPOSITORY: gateup/dev
  AWS_REGION: us-east-1
  IMAGE_NAME: gateup-local-api # Assuming 'api' is the service you want to push to ECR

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # This step prepares the host runner's filesystem before Docker mounts the volume.
      - name: Create Data Directory and Set Permissions
        run: mkdir -p ./dynamodb_data && chmod 777 ./dynamodb_data

      - name: Build and run Docker Compose
        run: docker compose up --build -d

      - name: Wait for API service to be healthy
        run: |
          echo "Waiting for API..."
          sleep 10
          for i in {1..15}; do
            STATUS=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8001/)
            if [ "$STATUS" -eq 200 ]; then
              echo "API is up and running!"
              exit 0
            fi
            echo "Attempt $i: API not ready yet (Status: $STATUS). Retrying in 7 seconds..."
            sleep 7
          done
          echo "API did not start in time."
          exit 1

      - name: Run API Healthcheck Test
        run: |
          echo "--- Running API Healthcheck Test ---"
          curl -f http://localhost:8001/
          if [ $? -ne 0 ]; then
            echo "API Healthcheck Test FAILED"
            exit 1
          fi
          echo "API Healthcheck Test PASSED"

      - name: Run Database Test
        run: |
          echo "--- Running Database Test ---"
          # Install unzip and the AWS CLI v2
          echo "Installing AWS CLI..."
          sudo apt-get update && sudo apt-get install -y unzip
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

          aws configure set aws_access_key_id dummykey
          aws configure set aws_secret_access_key dummysecret
          aws configure set region us-east-1

          echo "Checking for initial data in Residents table..."
          aws dynamodb scan --table-name Residents --endpoint-url http://localhost:8000 | grep "Yossi Cohen"
          if [ $? -ne 0 ]; then
            echo "DB Test FAILED: Initial resident data not found."
            exit 1
          fi
          echo "Initial data check PASSED."

          echo "Writing a test item to Guests table..."
          aws dynamodb put-item \
            --endpoint-url http://localhost:8000 \
            --table-name Guests \
            --item '{
              "license_plate": {"S": "CI-TEST-123"},
              "guest_name": {"S": "CI Tester"},
              "added_by": {"S": "workflow"}
            }'
          if [ $? -ne 0 ]; then
            echo "DB Test FAILED: 'put-item' command failed."
            exit 1
          fi
          echo "Write operation PASSED."

          echo "Reading test item back from Guests table..."
          aws dynamodb get-item \
            --endpoint-url http://localhost:8000 \
            --key '{"license_plate": {"S": "CI-TEST-123"}}' \
            --table-name Guests | grep "CI Tester"
          if [ $? -ne 0 ]; then
            echo "DB Test FAILED: Could not read the newly written item."
            exit 1
          fi
          echo "Read operation PASSED."
          echo "Database Test PASSED"

      - name: All Tests Passed
        if: success()
        run: echo "CI Pipeline Succeeded. All tests passed!"

      - name: Tests Failed
        if: failure()
        run: |
          echo "CI Pipeline FAILED"
          echo "--- Dumping final API logs ---"
          docker compose logs api
          echo "--- Dumping final DB logs ---"
          docker compose logs dynamodb
          exit 1

  push-to-ecr:
    name: Push to ECR
    runs-on: ubuntu-latest
    needs: build-and-test # This job runs only after build-and-test succeeds

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # The configure-aws-credentials action is the recommended way to authenticate.
      # IMPORTANT: You must configure these secrets in your GitHub repository settings.
      # Go to Settings > Secrets and variables > Actions > New repository secret
      # Create AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY secrets.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the docker image
          # This assumes your Dockerfile for the 'api' service is in the root directory.
          # Adjust the path to the Dockerfile if it's located elsewhere (e.g., ./api/Dockerfile)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .

          # Push the image to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Also tag as 'latest' and push
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "Image pushed to $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

